dNums = '731671765313306249192251196744265747423553491949349698352031277450632\
62395783180169848018694788518438586156078911294949545950173795833195285\
32088055111254069874715852386305071569329096329522744304355766896648950\
44524452316173185640309871112172238311362229893423380308135336276614282\
80644448664523874930358907296290491560440772390713810515859307960866701\
72427121883998797908792274921901699720888093776657273330010533678812202\
35421809751254540594752243525849077116705560136048395864467063244157221\
55397536978179778461740649551492908625693219784686224828397224137565705\
60574902614079729686524145351004748216637048440319989000889524345065854\
12275886668811642717147992444292823086346567481391912316282458617866458\
35912456652947654568284891288314260769004224219022671055626321111109370\
54421750694165896040807198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606058861164671094050775\
41002256983155200055935729725716362695618826704282524836008232575304207\
52963450'

def adjacent(s, n):
    slen = len(s)
    i = 0
    res = []
    tmp = s[:1]
    while i < slen-1 :
        i += 1
        if (abs(int(s[i]) - int(s[i-1])) <= 1):
            tmp += s[i]
            continue
        elif len(tmp) >= n:
            res.append(tmp)
        tmp = s[i]
    return res

def snorm(s, n):
    res = []
    slen = len(s)
    if slen < n:
        return res
    res.append(s[:n])
    for i in range(1, (slen - n)):
        res.append(s[i:(i+n)])
    return res

def compN(s):
    res = 1
    for i in s:
        res *= int(i)
    return res

if __name__ == '__main__':
    ans = []
    tt = snorm(dNums, 13)
    for i in tt:
        if '0' not in i:
            ans.append(i)
    print max(map(compN, ans))
